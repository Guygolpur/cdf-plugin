import React from 'react';
import { ChartType } from '../..';
import { Spec } from '../../../specs';
import { SpecType } from '../../../specs/constants';
import { Color, RecursivePartial } from '../../../utils/common';
import { Config } from '../layout/types/config_types';
import { GoalSubtype } from './constants';
/** @alpha */
export interface BandFillColorAccessorInput {
    value: number;
    index: number;
    base: number;
    target: number;
    highestValue: number;
    lowestValue: number;
    aboveBaseCount: number;
    belowBaseCount: number;
}
/** @alpha */
export declare type BandFillColorAccessor = (input: BandFillColorAccessorInput) => Color;
/** @alpha */
export interface GoalSpec extends Spec {
    specType: typeof SpecType.Series;
    chartType: typeof ChartType.Goal;
    subtype: GoalSubtype;
    base: number;
    target: number;
    actual: number;
    bands: number[];
    ticks: number[];
    bandFillColor: BandFillColorAccessor;
    tickValueFormatter: BandFillColorAccessor;
    labelMajor: string | BandFillColorAccessor;
    labelMinor: string | BandFillColorAccessor;
    centralMajor: string | BandFillColorAccessor;
    centralMinor: string | BandFillColorAccessor;
    config: RecursivePartial<Config>;
    bandLabels: string[];
}
declare type SpecRequiredProps = Pick<GoalSpec, 'id' | 'actual'>;
declare type SpecOptionalProps = Partial<Omit<GoalSpec, 'chartType' | 'specType' | 'id' | 'data'>>;
/** @alpha */
export declare const Goal: React.FunctionComponent<SpecRequiredProps & SpecOptionalProps>;
export {};
//# sourceMappingURL=index.d.ts.map