import React from 'react';
import { ChartType } from '../..';
import { Predicate } from '../../../common/predicate';
import { ScaleType } from '../../../scales/constants';
import { SeriesScales, Spec } from '../../../specs';
import { SpecType } from '../../../specs/constants';
import { Accessor, AccessorFn } from '../../../utils/accessor';
import { Color, Datum, RecursivePartial } from '../../../utils/common';
import { Config } from '../layout/types/config_types';
/** @public */
export declare type HeatmapScaleType = typeof ScaleType.Linear | typeof ScaleType.Quantile | typeof ScaleType.Quantize | typeof ScaleType.Threshold;
/** @alpha */
export interface HeatmapSpec extends Spec {
    specType: typeof SpecType.Series;
    chartType: typeof ChartType.Heatmap;
    data: Datum[];
    colorScale?: HeatmapScaleType;
    ranges?: number[] | [number, number];
    colors: Color[];
    xAccessor: Accessor | AccessorFn;
    yAccessor: Accessor | AccessorFn;
    valueAccessor: Accessor | AccessorFn;
    valueFormatter: (value: number) => string;
    xSortPredicate: Predicate;
    ySortPredicate: Predicate;
    xScaleType: SeriesScales['xScaleType'];
    config: RecursivePartial<Config>;
    highlightedData?: {
        x: Array<string | number>;
        y: Array<string | number>;
    };
    name?: string;
}
/** @alpha */
export declare const Heatmap: React.FunctionComponent<Pick<HeatmapSpec, 'id' | 'data'> & Partial<Omit<HeatmapSpec, 'chartType' | 'specType' | 'id' | 'data'>>>;
//# sourceMappingURL=heatmap.d.ts.map