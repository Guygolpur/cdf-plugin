import { Pixels, SizeRatio } from '../../../../common/geometry';
import { Font, FontFamily, TextAlign, TextBaseline } from '../../../../common/text_utils';
import { Color } from '../../../../utils/common';
import { Cell } from './viewmodel_types';
/**
 * @public
 */
export interface Config {
    width: Pixels;
    height: Pixels;
    margin: {
        left: SizeRatio;
        right: SizeRatio;
        top: SizeRatio;
        bottom: SizeRatio;
    };
    maxRowHeight: Pixels;
    maxColumnWidth: Pixels;
    fontFamily: FontFamily;
    timeZone: string;
    onBrushEnd?: (brushArea: HeatmapBrushEvent) => void;
    /**
     * Config of the mask over the area outside of the selected cells
     */
    brushMask: {
        visible: boolean;
        fill: Color;
    };
    /**
     * Config of the mask over the selected cells
     */
    brushArea: {
        visible: boolean;
        fill: Color;
        stroke: Color;
        strokeWidth: number;
    };
    /**
     * Config of the brushing tool
     */
    brushTool: {
        visible: boolean;
        fill: Color;
    };
    xAxisLabel: Font & {
        name: string;
        fontSize: Pixels;
        width: Pixels | 'auto';
        fill: string;
        align: TextAlign;
        baseline: TextBaseline;
        visible: boolean;
        padding: number;
        formatter: (value: string | number) => string;
    };
    yAxisLabel: Font & {
        name: string;
        fontSize: Pixels;
        width: Pixels | 'auto' | {
            max: Pixels;
        };
        fill: string;
        baseline: TextBaseline;
        visible: boolean;
        padding: number | {
            left?: number;
            right?: number;
            top?: number;
            bottom?: number;
        };
        formatter: (value: string | number) => string;
    };
    grid: {
        cellWidth: {
            min: Pixels;
            max: Pixels | 'fill';
        };
        cellHeight: {
            min: Pixels;
            max: Pixels | 'fill';
        };
        stroke: {
            color: string;
            width: number;
        };
    };
    cell: {
        maxWidth: Pixels | 'fill';
        maxHeight: Pixels | 'fill';
        align: 'center';
        label: Font & {
            fontSize: Pixels;
            maxWidth: Pixels | 'fill';
            fill: string;
            align: TextAlign;
            baseline: TextBaseline;
            visible: boolean;
        };
        border: {
            strokeWidth: Pixels;
            stroke: Color;
        };
    };
    maxLegendHeight?: number;
}
/** @public */
export declare type HeatmapBrushEvent = {
    cells: Cell[];
    x: (string | number)[];
    y: (string | number)[];
};
//# sourceMappingURL=config_types.d.ts.map