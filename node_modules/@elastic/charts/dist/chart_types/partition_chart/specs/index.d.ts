import React from 'react';
import { ChartType } from '../..';
import { Pixels } from '../../../common/geometry';
import { Spec } from '../../../specs';
import { SpecType } from '../../../specs/constants';
import { IndexedAccessorFn } from '../../../utils/accessor';
import { Datum, LabelAccessor, RecursivePartial, ShowAccessor, ValueAccessor, ValueFormatter } from '../../../utils/common';
import { Config, FillFontSizeRange, FillLabelConfig } from '../layout/types/config_types';
import { NodeColorAccessor, ValueGetter } from '../layout/types/viewmodel_types';
import { NodeSorter } from '../layout/utils/group_by_rollup';
interface ExtendedFillLabelConfig extends FillLabelConfig, FillFontSizeRange {
}
/**
 * Specification for a given layer in the partition chart
 * @public
 */
export interface Layer {
    groupByRollup: IndexedAccessorFn;
    sortPredicate?: NodeSorter | null;
    nodeLabel?: LabelAccessor;
    fillLabel?: Partial<ExtendedFillLabelConfig>;
    showAccessor?: ShowAccessor;
    shape?: {
        fillColor: string | NodeColorAccessor;
    };
}
/**
 * Specifies the partition chart
 * @public
 */
export interface PartitionSpec extends Spec {
    specType: typeof SpecType.Series;
    chartType: typeof ChartType.Partition;
    config: RecursivePartial<Config>;
    data: Datum[];
    valueAccessor: ValueAccessor;
    valueFormatter: ValueFormatter;
    valueGetter: ValueGetter;
    percentFormatter: ValueFormatter;
    topGroove: Pixels;
    smallMultiples: string | null;
    layers: Layer[];
}
declare type SpecRequiredProps = Pick<PartitionSpec, 'id' | 'data'>;
declare type SpecOptionalProps = Partial<Omit<PartitionSpec, 'chartType' | 'specType' | 'id' | 'data'>>;
/** @public */
export declare const Partition: React.FunctionComponent<SpecRequiredProps & SpecOptionalProps>;
export {};
//# sourceMappingURL=index.d.ts.map