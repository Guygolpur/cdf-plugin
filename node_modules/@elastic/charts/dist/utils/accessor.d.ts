import { Datum } from './common';
/**
 * Accessor function
 * @param datum - the datum
 * @public
 */
export interface UnaryAccessorFn<Return = any> {
    /**
     * Name used as accessor field name in place of function reference
     */
    fieldName?: string;
    (datum: Datum): Return;
}
/**
 * Accessor function
 * @param datum - the datum
 * @param index - the index in the array
 * @public
 */
export declare type BinaryAccessorFn<Return = any> = (datum: Datum, index: number) => Return;
/**
 * An accessor function
 * @public
 */
export declare type AccessorFn = UnaryAccessorFn;
/**
 * An indexed accessor function
 * @public
 */
export declare type IndexedAccessorFn = UnaryAccessorFn | BinaryAccessorFn;
/**
 * A key accessor string
 * @public
 */
export declare type AccessorObjectKey = string;
/**
 * An index accessor number
 * @public
 */
export declare type AccessorArrayIndex = number;
/**
 * A datum accessor in form of object key accessor string/number
 * @public
 */
export declare type Accessor = AccessorObjectKey | AccessorArrayIndex;
/**
 * Accessor format for _banded_ series as postfix string or accessor function
 * @public
 */
export declare type AccessorFormat = string | ((value: string) => string);
/**
 * Additive numbers: numbers whose semantics are conducive to addition; eg. counts and sums are additive, but averages aren't
 * @public
 */
export declare type AdditiveNumber = number;
//# sourceMappingURL=accessor.d.ts.map