import React from 'react';
import { Spec } from '.';
import { Predicate } from '../common/predicate';
/** @public */
export declare type GroupByAccessor = (spec: Spec, datum: any) => string | number;
/** @alpha */
export declare type GroupBySort = Predicate;
/**
 * Title formatter that handles any value returned from the GroupByAccessor
 * @public
 */
export declare type GroupByFormatter = (value: ReturnType<GroupByAccessor>) => string;
/** @alpha */
export interface GroupBySpec extends Spec {
    /**
     * Function to return a unique value __by__ which to group the data
     */
    by: GroupByAccessor;
    /**
     * Sort predicate used to sort grouped data
     */
    sort: GroupBySort;
    /**
     * Formatter used on all `by` values.
     *
     * Only for displayed values, not used in sorting or other internal computations.
     */
    format?: GroupByFormatter;
}
/** @alpha */
export declare type GroupByProps = Pick<GroupBySpec, 'id' | 'by' | 'sort' | 'format'>;
/** @alpha */
export declare const GroupBy: React.FunctionComponent<GroupByProps>;
//# sourceMappingURL=group_by.d.ts.map